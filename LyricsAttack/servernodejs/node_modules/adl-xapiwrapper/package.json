{
  "name": "adl-xapiwrapper",
  "version": "0.2.1",
  "description": "ADL's Experience API wrapper",
  "main": "lib/adl-xapiwrapper.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "grunt nodeunit"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/adlnet/xapiwrapper-node.git"
  },
  "keywords": [
    "ADL",
    "Experience",
    "API",
    "wrapper",
    "tin",
    "can"
  ],
  "author": {
    "name": "ADL"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/adlnet/xapiwrapper-node/issues"
  },
  "homepage": "https://github.com/adlnet/xapiwrapper-node",
  "dependencies": {
    "request": "~2.27.0"
  },
  "readme": "# ADL xAPI Wrapper - Node [![Build Status](https://secure.travis-ci.org/adlnet/xapiwrapper-node.png?branch=master)](http://travis-ci.org/adlnet/xapiwrapper-node)\n\nADL's Experience API wrapper for nodejs. The wrapper simplifies the process of communicating \nwith an xAPI LRS. \n\n## Getting Started\nInstall the module with: `npm install adl-xapiwrapper`\n\nStart the node Read-Eval-Print-Loop (REPL): `node` or `nodejs` depending on your installation.  \nSee [node's documentation](http://nodejs.org/api/repl.html) for more information.  \n\n```javascript\nvar adl = require('adl-xapiwrapper');\nvar opts = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    },\n};\nvar mylrs = new adl.XAPIWrapper(opts);\n\nmylrs.getStatements(null, null, function(err, resp, bdy) {\n    console.log(resp.statusCode);\n    console.log(JSON.parse(bdy));\n});\n>> 200\n>> {statements:[..], more:\"\"}\n```\n\n## Documentation and Examples\n### Module Attributes\n`xapiversion` - the version of the Experience API Spec this conforms to  \n`build` - an ISO date representing when this script was built  \n`debugLevel` - the minimum logging level to process ['error','warn','info]  \n```javascript\n// these values will vary based on the version of wrapper you have\nvar adl = require('adl-xapiwrapper');\nadl.xapiversion;\n>> '1.0.1'\nadl.build;\n>> '2013-11-14T20:14Z'\nadl.debugLevel;\n>> 'warn'\n```\n### Module Functions\n#### XAPI Request\n`function xapi_request(options, data, callback)`  \nEncapsulates making requests to an LRS. See the section on this wrapper's \n[instance functions](#instance-functions) for scripted ways to make common \ncalls to an LRS. This uses the request module. \n[see requests](https://npmjs.org/package/request)  \n* `options` - options object used by the request module. [see options](https://github.com/mikeal/request#requestoptions-callback)  \n* `data` - the payload for POSTs and PUTs  \n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one  \n\n```javascript\nvar adl = require('adl-xapiwrapper');\nvar myopts = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/statements\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    },\n    \"method\":\"GET\",\n    \"qs\":{\n        \"limit\":1\n    }\n};\nadl.debugLevel = 'info';\nadl.xapi_request(myopts, null, function (error, response, body) {\n    adl.log('info', response.statusCode);\n    adl.log('info', body);\n});\n>> info: 200\n>> info: {\"statements\": <statements>, \"more\": <more url>}\n```\n\n#### Hash \n`function hash(string)`  \nSha1 hash of a string. Used for hashing contents sent to \nthe document endpoints (state, activity profile, agent profile) to \nuse for concurrency checks.  \n```javascript\nvar doc = \"This is my activity profile\";\nvar myhash = adl.hash(doc)\n```\n#### Log\n`function log(level, message)`  \nWrites message to console based on level. Levels are `error`, `warn`, `info`.\nLevel filtering can be changed by setting `adl.debugLevel`.\n```javascript\nvar adl = require('adl-xapiwrapper');\nadl.debugLevel;\n>> 'warn'\nadl.log('info', 'this is an informational message');\n> undefined\nadl.debugLevel = 'info';\n>> 'info'\nadl.log('info', 'this is an informational message');\n>> info: this is an informational message\n```\n#### UUID  \n`function ruuid()`  \nGenerates a UUID that can be used anywhere the Experience API Spec \nspecifies one, such as Statement ID or Registration.  \n```javascript\nadl.ruuid();\n>> '47df99dd-e75f-484d-a85b-78cc988ae7c7'\n```\n#### Date from ISO String\n`function dateFromISOString(isostring)`  \nConverts and ISO date time string into a JavaScript date object.  \n```javascript\nvar date = adl.dateFromISOString(adl.build);\ndate;\n>> Thu Nov 14 2013 15:14:00 GMT-0500 (EST)\ndate.toDateString()\n>> 'Thu Nov 14 2013'\n```\n### Instance Functions\n#### Send Statements\n`function sendStatements(statements, callback)`  \nSends a single or a list of statements to the LRS.\nParameters:\n* `statements` - the single statement as a JSON object, or list of statements as a JSON array of objects\n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one \n\n```javascript\nvar adl = require('adl-xapiwrapper');\nadl.debugLevel = 'info';\nvar myconfig = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    }\n};\nvar mylrs = new adl.XAPIWrapper(myconfig);\n\nvar stmt = {\n    \"actor\" : {\"mbox\" : \"mailto:tom@example.com\"},\n    \"verb\" : {\"id\" : \"http://adlnet.gov/expapi/verbs/answered\",\n              \"display\" : {\"en-US\" : \"answered\"}},\n    \"object\" : {\"id\" : \"http://adlnet.gov/expapi/activities/question\"}\n};\n\nmylrs.sendStatements(stmt, function (err, resp, bdy) {\n    adl.log('info', resp.statusCode);\n    adl.log('info', bdy);\n});\n>> info: 200\n>> info: [<statement ids>]\n```\n#### Get Statements\n`function getStatements(searchparams, more, callback)`  \nSends a single or a list of statements to the LRS.  \nParameters:\n* `searchparams` - JSON object of search parameters. See [the xAPI Spec](https://github.com/adlnet/xAPI-Spec/blob/master/xAPI.md#723-getstatements) for parameters.\n* `more` - the url to more results. \n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one \n\n###### Get all Statements\n\n```javascript\nvar adl = require('adl-xapiwrapper');\nadl.debugLevel = 'info';\nvar myconfig = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    }\n};\nvar mylrs = new adl.XAPIWrapper(myconfig);\nmylrs.getStatements(null, null, function (err, resp, bdy) {\n    adl.log('info', resp.statusCode);\n    adl.log('info', bdy);\n    adl.log('info', JSON.parse(bdy).statements.length);\n});\n>> info: 200\n>> info: {\"statements\":[<statements>], \"more\":<url to more results>}\n>> info: 50 // depends on LRS\n```\n\n###### Get more Statements\n\n```javascript\nvar adl = require('adl-xapiwrapper');\nadl.debugLevel = 'info';\nvar myconfig = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    }\n};\nvar mylrs = new adl.XAPIWrapper(myconfig);\nmylrs.getStatements(null, null, function (err, resp, bdy) {\n    adl.log('info', resp.statusCode);\n    adl.log('info', bdy);\n    var bdyobj = JSON.parse(bdy)\n    if (bdyobj.more) {\n        adl.log('info', 'going to get more statements');\n        mylrs.getStatements(null, bdyobj.more, function (err, resp, bdy) {\n            adl.log('info', resp.statusCode);\n            adl.log('info', bdy);\n        });\n    }\n});\n>> info: 200\n>> info: {\"statements\":[<statements>], \"more\":<url to more results>}\n>> info: going to get more statements\n>> info: 200\n>> info: {\"statements\":[<statements>], \"more\":<url to more results>}\n```\n\n###### Get Statements based on Search Parameters\n\n```javascript\nvar adl = require('adl-xapiwrapper');\nadl.debugLevel = 'info';\nvar myconfig = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    }\n};\nvar mylrs = new adl.XAPIWrapper(myconfig);\nvar myopts = {\"verb\":\"http://adlnet.gov/expapi/verbs/answered\"};\nmylrs.getStatements(myopts, null, function (err, resp, bdy) {\n    adl.log('info', resp.statusCode);\n    adl.log('info', bdy);\n    adl.log('info', JSON.parse(bdy).statements.length);\n});\n>> info: 200\n>> info: {\"statements\":[<statements with verb 'answered'>], \"more\":<url to more results>}\n>> info: 50 // depends on LRS\n```\n\n#### Get Activities\n`function getActivities(activityid, callback)`  \nGets the complete Activity object from the LRS.  \nParameters:\n* `activityid` - the id of the Activity requested\n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one \n\n```javascript\nvar adl = require('adl-xapiwrapper');\nadl.debugLevel = 'info';\nvar myconfig = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    }\n};\nvar mylrs = new adl.XAPIWrapper(myconfig);\nmylrs.getActivities(\"act:adlnet.gov/JsTetris_XAPI\", function (err, resp, bdy) {\n    adl.log('info', resp.statusCode);\n    adl.log('info', bdy);\n});\n>> info: 200\n>> info: <complete Activity object>\n```\n#### Send State\n`function sendState(activityid, agent, stateid, registration, stateval, matchHash, noneMatchHash, callback)`  \nSends state information about the agents experience of the activity.  \nParameters:\n* `activityid` - the id of the Activity this state is about\n* `agent` - the agent this Activity state is related to \n* `stateid` - the id you want associated with this state\n* `registration` - (optional) the registraton id associated with this state\n* `stateval` - the state\n* `matchHash` - the hash of the state to replace or * to replace any\n* `noneMatchHash` - the hash of the current state or * to indicate no previous state\n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one \n\n#### Get State\n`function getState(activityid, agent, stateid, registration, since, callback)`  \nGet activity state from the LRS  \nParameters:\n* `activityid` - the id of the Activity this state is about\n* `agent` - the agent this Activity state is related to \n* `stateid` - (optional - if not included, the response will be a list of stateids \n                          associated with the activity and agent)\n                          the id you want associated with this state\n* `registration` - (optional) the registraton id associated with this state\n* `since` - date object telling the LRS to return objects newer than the date supplied\n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one \n\n###### Send / Retrieve New Activity state  \n\n```javascript\nvar adl = require('adl-xapiwrapper');\nadl.debugLevel = 'info';\nvar myconfig = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    }\n};\nvar mylrs = new adl.XAPIWrapper(myconfig);\n\nvar myactid = \"http://example.com/activity/trails/appalachian\";\nvar agent = {\"mbox\":\"mailto:hikerbob@example.com\"};\nvar mystateid = \"training:appalachian-trail\";\nvar mystate = {\"trees\":[\"hemlock\",\"blue spruce\"],\"scene\":\"forest\"};\n\nmylrs.sendState(myactid, agent, mystateid, null, mystate, null, \"*\", function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"got an error\");\n    } else {\n        adl.log(\"info\", \"response status: \" + resp.statusCode);\n    }\n});\n>> info: response status: 204\n\nmylrs.getState(myactid, agent, mystateid, null, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"got an error\");\n    } else {\n        adl.log(\"info\", \"status code: \" + resp.statusCode);\n        adl.log(\"info\", \"the state: \" + bdy);\n    }\n});\n>> info: status code: 200\n>> info: the state: {\"trees\":[\"hemlock\",\"blue spruce\"],\"scene\":\"forest\"}\n```\n\n###### Change Activity State\n\n```javascript\nvar statehash = adl.hash(JSON.stringify(mystate));\nmystate['checkpoint'] = \"pa-w-blaze-6\";\nmylrs.sendState(myactid, agent, mystateid, null, mystate, statehash, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"got an error\");\n    } else {\n        adl.log(\"info\", \"status code: \" + resp.statusCode);\n    }\n});\n>> info: status code: 204\n\nmylrs.getState(myactid, agent, mystateid, null, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"got an error\");\n    } else {\n        adl.log(\"info\", \"state: \" + bdy);\n    }\n});\n>> info: state: {\"checkpoint\": \"pa-w-blaze-6\", \"scene\": \"forest\", \"trees\": [\"hemlock\", \"blue spruce\"]}\n```\n\n###### Get all state ids for given Activity and Agent\n\n```javascript\nmylrs.getState(myactid, agent, null, null, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"got an error\");\n    } else {\n        adl.log(\"info\", \"state ids: \" + bdy);\n    }\n});\n>> info: state ids: [\"training:appalachian-trail\"]\n```\n\n###### Get state ids for a given Activity and Agent since a specified time\n\n```javascript\nvar sincehere = new Date()\nvar newstateid = \"content:settings\";\nvar newstate = {\"fps\":\"30\",\"resolution\":\"1680x1050\"};\nmylrs.sendState(myactid, agent, newstateid, null, newstate, null, \"*\", function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"error with request: \" + err);\n    } else {\n        adl.log(\"info\", \"status: \" + resp.statusCode);\n    }\n});\n>> info: status: 204\n\n// get all state ids\nmylrs.getState(myactid, agent, null, null, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"error with request: \" + err);\n    } else {\n        adl.log(\"info\", \"state ids: \" + bdy);\n    }\n});\n>> info: state ids: [\"content:settings\", \"training:appalachian-trail\"]\n\n// get ids of states saved since ..\nmylrs.getState(myactid, agent, null, null, sincehere, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"error with request: \" + err);\n    } else {\n        adl.log(\"info\", \"state ids since \" + sincehere + \": \" + bdy);\n    }\n});\n>> info: state ids since Mon Nov 18 2013 09:31:15 GMT-0500 (EST): [\"content:settings\"]\n```\n\n#### Send Activity Profile\n`function sendActivityProfile(activityid, profileid, profileval, matchHash, noneMatchHash, callback)`  \nSends an Activity Profile to the LRS.  \nParameters:\n* `activityid` - the id of the Activity this profile is about\n* `profileid` - the id you want associated with this profile\n* `profileval` - the profile\n* `matchHash` - the hash of the profile to replace or * to replace any\n* `noneMatchHash` - the hash of the current profile or * to indicate no previous profile\n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one \n\n#### Get Activity Profile\n`function getActivityProfile(activityid, profileid, since, callback)`  \nGet activity profile from the LRS  \nParameters:  \n* `activityid` - the id of the Activity this profile is about\n* `profileid` - (optional - if not included, the response will be a list of profileids \n                associated with the activity)\n                the id of the profile\n* `since` - date object telling the LRS to return objects newer than the date supplied\n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one \n\n###### Send / Retrieve New Activity Profile \n\n```javascript\nvar adl = require('adl-xapiwrapper');\nadl.debugLevel = 'info';\nvar myconfig = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    }\n};\nvar mylrs = new adl.XAPIWrapper(myconfig);\n\nvar profile = {\"type\":\"question\"};\nvar activityid = \"http://adlnet.gov/expapi/activities/question\";\nvar profileid = \"question:profile\";\n\nmylrs.sendActivityProfile(activityid, profileid, profile, null, \"*\", function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"status: \" + resp.statusCode);\n    }\n});\n>> info: status: 204\n\nmylrs.getActivityProfile(activityid, profileid, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"profile: \" + bdy);\n    }\n});\n>> info: profile: {\"type\":\"question\"}\n```\n\n###### Update Activity Profile \n\n```javascript\nvar profhash = adl.hash(JSON.stringify(profile));\nprofile[\"updated\"] = true;\n\nmylrs.sendActivityProfile(activityid, profileid, profile, profhash, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"status: \" + resp.statusCode);\n    }\n});\n>> info: status: 204\n\nmylrs.getActivityProfile(activityid, profileid, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"profile: \" + bdy);\n    }\n});\n>> info: profile: {\"updated\": true, \"type\": \"question\"}\n```\n\n###### Get all profiles about a specific Activity\n\n```javascript\nmylrs.getActivityProfile(activityid, null, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"profile ids: \" + bdy);\n    }\n});\n>> info: profile ids: [\"question:profile\"]\n```\n\n###### Get profiles about an Activity since a certain time\n\n```javascript\nvar sincehere = new Date();\n\nvar newprofile = {\"another\" : \"profile\"};\nvar newprofileid = \"another:profile\";\n\nmylrs.sendActivityProfile(activityid, newprofileid, newprofile, null, \"*\", function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"status: \" + resp.statusCode);\n    }\n});\n>> info: status: 204\n\n// get all ids\nmylrs.getActivityProfile(activityid, null, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"profile ids: \" + bdy);\n    }\n});\n>> info: profile ids: [\"question:profile\", \"another:profile\"]\n\n// get ids of Activity Profiles saved since date...\nmylrs.getActivityProfile(activityid, null, sincehere, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"profile ids: \" + bdy);\n    }\n});\n>> info: profile ids: [\"another:profile\"]\n```\n\n#### Get Agents\n`function getAgents(agent, callback)`  \nGets a special Person object containing all the values \nof an Agent the LRS knows about. The Person object's \nidentifying properties are arrays and it may have more \nthan one identifier. [See more about Person in the spec](https://github.com/adlnet/xAPI-Spec/blob/master/xAPI.md#getagents)  \nParameters:\n* `agent` - JSON object representing an agent ex: {\"mbox\":\"mailto:tom@example.com\"}\n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one \n\n```javascript\nvar adl = require('adl-xapiwrapper');\nadl.debugLevel = 'info';\nvar myconfig = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    }\n};\nvar mylrs = new adl.XAPIWrapper(myconfig);\n\nmylrs.getAgents({\"mbox\":\"mailto:tom@example.com\"}, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"error in request: \" + err);\n    } else {\n        adl.log(\"info\", \"the Person: \" + bdy);\n    }\n});\n>> info: the Person: <Person object>\n```\n#### Send Agent Profile\n`function sendAgentProfile(agent, profileid, profileval, matchHash, noneMatchHash, callback)`  \nSends an Agent Profile to the LRS.  \nParameters:\n* `agent` - the agent this profile is related to\n* `profileid` - the id you want associated with this profile\n* `profileval` - the profile\n* `matchHash` - the hash of the profile to replace or * to replace any\n* `noneMatchHash` - the hash of the current profile or * to indicate no previous profile\n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one \n\n#### Get Agent Profile\n`function getAgentProfile(agent, profileid, since, callback)`  \nGets an Agent Profile from the LRS.  \nParameters:\n* `agent` - the agent associated with this profile\n* `profileid` - (optional - if not included, the response will be a list of profileids \n                associated with the agent)\n                the id of the profile\n* `since` - date object telling the LRS to return objects newer than the date supplied\n* `callback` - function to process after request has completed.  \n    * Parameters passed to callback:\n    * `error` - an error message if something went wrong  \n    * `response` - the response object  \n    * `body` - the body of the response if there is one \n\n###### Send / Retrieve New Agent Profile \n\n```javascript\nvar adl = require('adl-xapiwrapper');\nadl.debugLevel = 'info';\nvar myconfig = {\n    \"url\":\"https://lrs.adlnet.gov/xapi/\",\n    \"auth\":{\n        \"user\":\"tom\",\n        \"pass\":\"1234\"\n    }\n};\nvar mylrs = new adl.XAPIWrapper(myconfig);\n\nvar profile = {\"competencies\":[\"http://adlnet.gov/competency/sitting-quietly\", \n                               \"http://adlnet.gov/competency/watching-tv\"], \n               \"current path\":\"http://adlnet.gov/competency/knitting\"};\nvar agent = {\"mbox\":\"mailto:tom@example.com\"};\nvar profileid = \"competencies\";\n\nmylrs.sendAgentProfile(agent, profileid, profile, null, \"*\", function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"status: \" + resp.statusCode);\n    }\n});\n>> info: status: 204\n\nmylrs.getAgentProfile(agent, profileid, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"profile: \" + bdy);\n    }\n});\n>> info: profile: {\"competencies\":[\"http://adlnet.gov/competency/sitting-quietly\",\n                                   \"http://adlnet.gov/competency/watching-tv\"],\n                   \"current path\":\"http://adlnet.gov/competency/knitting\"}\n```\n\n###### Update Agent Profile \n\n```javascript\nvar profhash = adl.hash(JSON.stringify(profile));\nprofile[\"competencies\"].push(profile['current path']);\nprofile[\"current path\"] = \"http://adlnet.gov/competency/juggling\";\n\nmylrs.sendAgentProfile(agent, profileid, profile, profhash, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"status: \" + resp.statusCode);\n    }\n});\n>> info: status: 204\n\nmylrs.getAgentProfile(agent, profileid, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"profile: \" + bdy);\n    }\n});\n>> info: profile: {\"competencies\": [\"http://adlnet.gov/competency/sitting-quietly\", \n                                    \"http://adlnet.gov/competency/watching-tv\", \n                                    \"http://adlnet.gov/competency/knitting\"], \n                   \"current path\": \"http://adlnet.gov/competency/juggling\"}\n```\n\n###### Get all profiles about a specific Agent\n\n```javascript\nmylrs.getAgentProfile(agent, null, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"profile ids: \" + bdy);\n    }\n});\n>> info: profile ids: [\"competencies\"]\n```\n\n###### Get profiles about an Agent since a certain time\n\n```javascript\nvar sincehere = new Date();\n\nvar newprofile = {\"another\" : \"profile\"};\nvar newprofileid = \"another:profile\";\n\nmylrs.sendAgentProfile(agent, newprofileid, newprofile, null, \"*\", function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"status: \" + resp.statusCode);\n    }\n});\n>> info: status: 204\n\n// get all ids\nmylrs.getAgentProfile(agent, null, null, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"profile ids: \" + bdy);\n    }\n});\n>> info: profile ids: [\"competencies\", \"another:profile\"]\n\n// get ids of Activity Profiles saved since date...\nmylrs.getAgentProfile(agent, null, sincehere, function (err, resp, bdy) {\n    if (err) {\n        adl.log(\"error\", \"request error: \" + err);\n    } else {\n        adl.log(\"info\", \"profile ids: \" + bdy);\n    }\n});\n>> info: profile ids: [\"another:profile\"]\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or \nchanged functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n* 0.2.0 - Initial commit and release to npm\n* 0.2.1 - Update of Readme\n\n## License\nCopyright (c) 2013 ADL  \nLicensed under the Apache, 2.0 licenses.\n",
  "readmeFilename": "README.md",
  "_id": "adl-xapiwrapper@0.2.1",
  "dist": {
    "shasum": "a7036dc83cb8042801fe3bd277c5ca0dcb2551e1",
    "tarball": "http://registry.npmjs.org/adl-xapiwrapper/-/adl-xapiwrapper-0.2.1.tgz"
  },
  "_from": "adl-xapiwrapper@",
  "_npmVersion": "1.3.13",
  "_npmUser": {
    "name": "adltechteam",
    "email": "adltechteam@adlnet.gov"
  },
  "maintainers": [
    {
      "name": "adltechteam",
      "email": "adltechteam@adlnet.gov"
    }
  ],
  "_shasum": "a7036dc83cb8042801fe3bd277c5ca0dcb2551e1",
  "_resolved": "https://registry.npmjs.org/adl-xapiwrapper/-/adl-xapiwrapper-0.2.1.tgz"
}
